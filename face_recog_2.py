# -*- coding: utf-8 -*-
"""Face_Recog 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E_KiP5t5A7AHSicguhqixEpnXGToMgEi
"""

#Basic face recognizer using pre trained model
# the model was trained on three classes of images..

# Commented out IPython magic to ensure Python compatibility.
# importing libraries
import numpy as np
from keras.layers import Input,Dense,Flatten,Dropout
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras.preprocessing import image
from keras.applications.vgg16 import preprocess_input
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import EarlyStopping
import matplotlib.pyplot as plt
# %matplotlib inline

# setting the directories of the data that will be used
# the train
# the test 
# the validation

train_path = '/content/drive/My Drive/New_ Project/4 images /Train'
test_path = '/content/drive/My Drive/New_ Project/4 images /Test'

#image size fot vgg16 is 224 * 224
image_size = [224,224]

# Adding preprocessing layer to the front of the VGG
vgg = VGG16(input_shape= image_size + [3],weights='imagenet',include_top = False)

# not training the existing weights or parameter
for layer in vgg.layers:
  layer.trainable = False

# creating the suitable layer for our model
def create_model(vgg_output,vgg_input,drop,optimizer):
  x = Flatten()(vgg_output)
  #x = Dense(512,activation = 'relu)(x)
  #x = Dropout(drop)(x)
  prediction = Dense(3,activation='softmax')(x)
  model = Model(inputs= vgg_input,outputs=prediction)
  import tensorflow as tf
  #opt = tf.keras.optimizers.Adam(learning_rate=0.1)
  model.compile(loss='categorical_crossentropy',optimizer= optimizer,metrics= ['accuracy'])
  
  return model

# viewing the structure of the model
model = create_model(vgg.output,vgg.input,0,'adam') 
model.summary

model.summary()

train_datagen = ImageDataGenerator(rescale= 1/255,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1/255)

training_set = train_datagen.flow_from_directory(train_path,
                                                target_size=(224,244),
                                                batch_size = 32,
                                                class_mode = 'categorical')

test_set = test_datagen.flow_from_directory(test_path,
                                          target_size=(224,224),
                                          batch_size= 32,
                                          class_mode = 'categorical')

hist = model.fit(training_set,
                validation_data= test_set,
                epochs = 30,
                steps_per_epoch = 15,
                validation_steps = 11,verbose=1)

# Accuracy plotting the accuracy and validation accuracy
plt.plot(hist.history['accuracy'],label = 'train_acc')
plt.plot(hist.history['val_accuracy'],label = 'val_acc')
plt.legend()

# Loss plotting the loss and the validation loss 
plt.plot(hist.history['loss'],label = 'train_loss')
plt.plot(hist.history['val_loss'],label = 'val_loss')
plt.legend()

from keras.models import load_model

model.save('facefeatures_new_model')

#testing an unseen image .
# dir = path of the image to be tested
#dir = '/content/tom-hardy-actor-attends-/content/gettyimages-1155328229-2048x2048.jpgmad-max-fury-road-photocall-th-annual-cannes-film-festival-may-cannes-france-58038178.jpg'
dir = '/content/gettyimages-1044563410-2048x2048.jpg'
from keras_preprocessing import image 
img = image.load_img(dir,
      target_size=(224,224))

img = np.asarray(img)
plt.imshow(img)

# the index of each image 
training_set.class_indices

img = np.expand_dims(img,axis=0)
from keras.models import load_model
saved_model = load_model('facefeatures_new_model')
output = saved_model.predict(img)
print(output)
print(np.argmax(output))
if np.argmax(output) == 2:
  print('Match found ! Tom Hardy')

# importing cv2 to process the image data
import cv2

# loading cascades
# cascade enables the selection of the frontalface
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# cropping the area of the face to be examined
# img should be an array ie from imread or load_image
def face_extractor(img_dir):
  # fuction detects the faces and returns the cropped face
  # if no face detected , it returns the input image 
  dir = img_dir
  from keras_preprocessing import image 
  img = image.load_img(dir,
        target_size=(250,250))
  img = np.asarray(img)
  rgb_img = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)
  faces = face_cascade.detectMultiScale(img,1.3,5)
  for (x,y,w,h) in faces:
    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
    # the location of the parts of the face i
    cropped_face = rgb_img[y:y+h , x:x+w]
    loc = cv2.rectangle(rgb_img,(x,y),(x+w,y+h),(255,0,0),2)
  return (x,y,w,h),loc
   
  #return cropped_face

# importing cv2_imshow from google.colab.patches instead of using the cv2.imshow  directly 
# due to it inability in google colab
from google.colab.patches import cv2_imshow

def face_identification(img_dir):
  from keras_preprocessing import image 
  try:
    name = ['Chris Evans','Robert Jr', 'Tom Hardy']
    img = image.load_img(img_dir,
          target_size=(224,224))
    img = np.asarray(img)
    img = np.expand_dims(img,axis=0)
    from keras.models import load_model
    saved_model = load_model('facefeatures_new_model')
    output = saved_model.predict(img)
    loc,crop_rec = face_extractor(img_dir)
    image = crop_rec
    if (output[0][0] > 0.5 ):
        name = name[0]
        cv2.putText(image,name,(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
    elif (output[0][1] > 0.5 ):
      name = name[1]
      cv2.putText(image,name,(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
    elif (output[0][2] > 0.5 ):
      name = name[2]
      cv2.putText(image,name,(25,25),cv2.FONT_HERSHEY_COMPLEX,0.4,(0,255,0),1)
    else:
      name = 'Unknown'
      cv2.putText(image,name,(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
    cv2_imshow(image)
  except :
    pass
    print('Use a valid image with a compatible dimension')

face_identification('/content/gettyimages-1044563410-2048x2048.jpg')

face_identification('/content/Robert-Downey-Jr-2008.jpg')

import os

path = '/content/drive/My Drive/4 class'
for img in os.listdir(path):
  image = os.path.join(path,img)
  face_identification(image)

face_identification('/content/chris-evans-hollywood-domino-gala-sunset-tower-hotel-west-hollywood-ca-37285925.jpg')
#comparing the false positive above to thhe one below 
# images with correct dimensions  gives accurate results.


face_identification('/content/chris-evans-los-angeles-ca-february-th-annual-academy-awards-dolby-theatre-hollywood-52527049.jpg')



