# -*- coding: utf-8 -*-
"""Face Recog .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SjWT8cC_cHiC4b_MpaI66c4l6IyEkPlB
"""

# Commented out IPython magic to ensure Python compatibility.
# importing libraries
import numpy as np
from keras.layers import Input,Dense,Flatten,Dropout
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras.preprocessing import image
from keras.applications.vgg16 import preprocess_input
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import EarlyStopping
import matplotlib.pyplot as plt
# %matplotlib inline

# setting the directories of the data that will be used
# the train
# the test 
# the validation

train_path = '/content/drive/My Drive/New_ Project/4 images /Train'
test_path = '/content/drive/My Drive/New_ Project/4 images /Test'

#image size fot vgg16 is 224 * 224
image_size = [224,224]

# Adding preprocessing layer to the front of the VGG
vgg = VGG16(input_shape= image_size + [3],weights='imagenet',include_top = False)

# not training the existing weights or parameter
for layer in vgg.layers:
  layer.trainable = False

# the suitable layer for our model
def create_model(vgg_output,vgg_input,drop,optimizer):
  x = Flatten()(vgg_output)
  #x = Dense(512,activation = 'relu)(x)
  #x = Dropout(drop)(x)
  prediction = Dense(3,activation='softmax')(x)
  model = Model(inputs= vgg_input,outputs=prediction)
  import tensorflow as tf
  #opt = tf.keras.optimizers.Adam(learning_rate=0.1)
  model.compile(loss='categorical_crossentropy',optimizer= optimizer,metrics= ['accuracy'])
  
  return model

# viewing the structure of the model
model = create_model(vgg.output,vgg.input,0,'adam') 
model.summary

model.summary()

train_datagen = ImageDataGenerator(rescale= 1/255,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1/255)

training_set = train_datagen.flow_from_directory(train_path,
                                                target_size=(224,244),
                                                batch_size = 32,
                                                class_mode = 'categorical')

test_set = test_datagen.flow_from_directory(test_path,
                                          target_size=(224,224),
                                          batch_size= 32,
                                          class_mode = 'categorical')

hist = model.fit(training_set,
                validation_data= test_set,
                epochs = 15,
                steps_per_epoch = 15,
                validation_steps = 11,verbose=1)

# Accuracy plotting the accuracy and validation accuracy
plt.plot(hist.history['accuracy'],label = 'train_acc')
plt.plot(hist.history['val_accuracy'],label = 'val_acc')
plt.legend()

# Loss plotting the loss and the validation loss 
plt.plot(hist.history['loss'],label = 'train_loss')
plt.plot(hist.history['val_loss'],label = 'val_loss')
plt.legend()

model.save('faces_model_1')

dir = '/content/drive/My Drive/tom-hardy-actor-attends-mad-max-fury-road-photocall-th-annual-cannes-film-festival-may-cannes-france-58038178.jpg'
from keras_preprocessing import image 
img = image.load_img(dir,
      target_size=(224,224))

img = np.asarray(img)
plt.imshow(img)

training_set.class_indices

img = np.expand_dims(img,axis=0)
from keras.models import load_model
saved_model = load_model('faces_model_1')
output = saved_model.predict(img)
print(output)
print(np.argmax(output))

import cv2

# loading cascades
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

def face_extractor(img):
  # fuction detects the faces and returns the cropped face
  # if no face detected , it returns the input image 

  rgb_img = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)
  faces = face_cascade.detectMultiScale(img,1.3,5)
  for (x,y,w,h) in faces:
    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
    # the location of the parts of the face i
    cropped_face = rgb_img[y:y+h , x:x+w]
  return cropped_face
  cv2.waitKey(0)

dir = '/content/drive/My Drive/tom-hardy-actor-attends-mad-max-fury-road-photocall-th-annual-cannes-film-festival-may-cannes-france-58038178.jpg'
from keras_preprocessing import image 
img = cv2.imread(dir)

face_extractor(img)

plt.imshow(face_extractor(img))

from google.colab.patches import cv2_imshow

from PIL import Image
face = face_extractor(img)
if type(face) is np.ndarray:
  face = cv2.resize(face,(224,224))
  im = Image.fromarray(face,'RGB')
  img_array = np.asarray(im)
  img_array = np.expand_dims(img_array,axis=0)
  output = saved_model.predict(img_array)
  print(output)
  name = 'Unknown'
  if (output[0][2] > 0.5 ):
    name = 'Tom Hardy'
    cv2.putText(img,name,(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
else:
    cv2.putText(img,'Unknown',(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
cv2_imshow(img)

dir = '/content/drive/My Drive/New loaded images/test/pins_Tom Hardy/Tom Hardy181_1281.jpg'
from keras_preprocessing import image 
img = cv2.imread(dir)

from PIL import Image
face = face_extractor(img)
if type(face) is np.ndarray:
  face = cv2.resize(face,(224,224))
  im = Image.fromarray(face,'RGB')
  img_array = np.asarray(im)
  img_array = np.expand_dims(img_array,axis=0)
  output = saved_model.predict(img_array)
  print(output)
  name = 'Unknown'
  if (output[0][2] > 0.5 ):
    name = 'Tom Hardy'
    cv2.putText(img,name,(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
else:
    cv2.putText(img,'Unknown',(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
cv2_imshow(img)

dir = '/content/drive/My Drive/New loaded images/test/pins_Chris Evans/gettyimages-1132843485-2048x2048.jpg'
from keras_preprocessing import image 
img = cv2.imread(dir)

from PIL import Image
face = face_extractor(img)
if type(face) is np.ndarray:
  face = cv2.resize(face,(224,224))
  im = Image.fromarray(face,'RGB')
  img_array = np.asarray(im)
  img_array = np.expand_dims(img_array,axis=0)
  output = saved_model.predict(img_array)
  print(output)
  name = 'Unknown'
  if (output[0][2] > 0.5 ):
    name = 'Tom Hardy'
    cv2.putText(img,name,(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
  else:
    if (output[0][0] > 0.5):
      name = 'Chris Evans'
      cv2.putText(img,name,(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
cv2_imshow(img)

